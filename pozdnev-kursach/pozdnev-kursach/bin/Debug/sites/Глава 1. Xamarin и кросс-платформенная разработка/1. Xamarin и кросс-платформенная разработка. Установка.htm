<div class="innercontainer">
<p><span class="b">Xamarin.Forms</span> представляет платформу, которая нацелена на создание кроссплатформенных приложений под Android, iOS и Windows 10. 
Зачем использовать именно данную платформу, какие преимущества она несет? Есть определенные статистические данные, что значительная часть мобильных приложений создается более чем для одной платформы, 
например, для Android и iOS. Однако неизбежно разработчики сталкиваются со следующими трудностями:</p>
<ul>
<li><p>различие в подходах построение графического интерфейса так или иначе влияет на разработку. Разработчики вынуждены подстраивать приложение 
под требования к интерфейсу на конкретной платформе</p></li>
<li><p>разные API - различие в программных интерфейсах и реализациях тех или иных функциональностей также требует от программиста учет этих 
специфических особенностей</p></li>
<li><p>разные платформы для разработки. Например, чтобы создавать приложения для iOS нам необходима соответствующая среда - Mac OS X и ряд специальных 
инструментов, типа XCode. А в качестве языка программирования выбирается Objective-C или Swift. Для Androidа мы можем использовать самый 
разный набор сред - Android Studio, Eclipse и т.д. Но здесь для подавляющего большинства приложений применяется Java или Kotlin.</p>
<p>А для создания приложений под Windows используется Visual Studio, а в качестве языков - C#, F#, VB.NET, C++</p></li>
</ul>
<p>Такой диапазон платформ, средств разработки и языков программирования не может положительно сказываться на сроках создания приложений, 
и, в конечном счете, на денежных средствах, выделяемых на разработку. Было бы очень эффективно иметь один инструмент, который позволял легко и просто 
создавать приложения сразу для всех платформ. И именно таким инструментом и является платформа <span class="b">Xamarin</span> (произносится как "зэмарин").</p>
<p>Xamarin позволяет создавать одну единcтвенную логику приложения с применением C# и .NET сразу для всех трех платформ - Android, iOS, UWP.</p>
<p>Преимущества использования Xamarin.Forms:</p>
<ul>
<li><p>В процессе разработки создается единый код для всех платформ</p></li>
<li><p>Xamarin предоставляет прямой доступ к нативным API каждой платформы</p></li>
<li><p>При создании приложений мы можем использовать платформу .NET и язык программирования C# (а также F#), который является достаточно производительным, и в тоже время 
ясным и простым для освоения и применения</p></li>
<li><p>Xamarin Forms поддерживает несколько платформ. Основные платформы: Android, iOS, UWP, Tizen. Дополнительные платформы, которые развиваются сообществом:  MacOS, WPF, GTK#.</p></li>
</ul>
<p>5 января 2021 года вышла последняя версия данной платформы - <span class="b">Xamarin Forms 5.0</span> и собственно она и будет рассматриваться в данном руководстве.</p>
<h3>Как работает Xamarin</h3>
<p>Работу Xamarin графически можно представить следующим образом:</p>
<img src="./pics/xamarinforms.png" alt="Как работает Xamarin Forms" />
<p>Xamarin работает поверх фреймворка Mono, который предоставляет opensource-реализацию .NET Framework. Mono может работать поверх 
разных платформ - Linix, MacOS и т.д.</p>
<p>На уровне каждой отдельной платформы Xamarin полагается на ряд субплатформ. В частности:</p>
<ul>
<li><p>Xamarin.Android - библиотеки для создания приложений на ОС Android</p></li>
<li><p>Xamarin.iOS - библиотеки для создания приложений для iOS</p></li>
</ul>
<p>Эти субплатформы играют большую роль - через них приложения могут напрявлять запросы к прикладным интерфейсам на устройствах под управлением 
ОС Android или iOS. Вкратце это выглядит следующим образом.</p>
<p>С помощью Xamarin.Android код C# с использованием Xamarin компилируется в Intermediate Language (IL), который затем при запуске приложения 
компилируется в нативную сборку. Xamarin-приложения запускаются в среде выполнения Mono. Напрямую код не может обращаться к API Android. Для этого надо обратиться к функциональность пространств имен Android.* и Java.*, которые 
прдоставляются виртуальной машиной Android Runtime (ART). Специальная прослойка <span class="b">Managed Callable Wrappers (MCW)</span> 
позволяет транслировать вызова managed-кода в нативные вызовы и обращаться к функциональности пространств имен Android.* и Java.*</p>
И наоборот, когда Android Runtime (ART) обращается к приложению с кодом Xamarin, то все вызовы проходят через обертку 
<span class="b">Android Callable Wrappers (ACW)</span>.</p>
<p>Приложения Xamarin.iOS в отличие от Xamarin.Android, который использует JIT-компиляцию, применяют AOT-компиляцию (Ahead-of-Time) кода C# 
в нативный ARM-код. Xamarin использует промежуточный слой Selectors (селекторы) для трансляции вызовов кода Objective-C в 
код на C# и слой Registrars (регистраторы) для трансляции кода C# в Objective-C. В итоге слои Selectors и Registrars в целом представляют премежуточный слой, который на иллюстрации выше 
обозначен как "bindings" и который собственно позволяет взаимодействовать коду Objective-C с кодом C#.</p>
<p>В итоге благодаря этим платформам мы можем создавать отдельно приложения для Android, отдельно для iOS, но 
наиболее важной особенностью Xamarin является возможность создавать кроссплатформенные приложения - то есть одна логика для всех платформ. 
 Данная возможность представлена технологией <span class="b">Xamarin.Forms</span> и которая работает как бы уровнем выше Xamarin.Android и Xamarin.iOS. 
 То есть с помощью Xamarin.Forms мы один раз можем определить визуальный интерфейс, один раз к нему привязать какую-то логику на C#, и все это будет работать на 
Android, iOS и Windows. Затем Xamarin.Forms с помощью рендереров (renderer) - специальных объектов для связи контроллов на XAML/C# с нативными контроллами 
транслируют визуальные компоненты Xamarin.Forms в графический интерфейс, специфичный для каждой платформы.</p>
<h3>Установка Xamarin</h3>
<p>Для разработки кроссплатформенных приложений на Xamarin нам нужна среда разработки. Для Windows такой средой является Visual Studio. 
То есть, если нашей ОС является Windows, то нам вначале надо установить <a href="https://visualstudio.microsoft.com/downloads/" rel="nofollow">Visual Studio 2019</a>. При этом можно использовать в том числе и бесплатный 
выпуск Visual Studio 2019 Community.</p>
<p>При установке Visual Studio 2019 в программе для установщика обязательно надо выбрать пункт "Разработка мобильных приложений на .NET":</p>
<img src="./pics/1.18.png" alt="Установка Xamarin для Visual Studio 2019" />
<p>После инсталляции мы сможем в меню <span class="b">Help</span> -&gt;<span class="b">About Microsoft Visual Studio</span> увидеть отметку о Xamarin:</p>
<img src="./pics/1.10.png" alt="Xamarin в Visual Studio" />
<p>Если целевой операционной системой является Mac OS X, то в этом случе нам надо установить <a href="https://visualstudio.microsoft.com/vs/mac/" rel="nofollow">Visual Studio for Mac</a>.</p>
<p>Кроме того, для разработки на Mac OS X требуется установить XCode, который доступен в AppStore.</p>
</ul>   </div>
</div>
