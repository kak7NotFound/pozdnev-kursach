	<p>По умолчанию в созданном в прошлой теме проекте у нас уже есть минимальный код, необходимый для приложения. Само выполнение приложения 
начинается с файлов <span class="b">App.xaml</span> и <span class="b">App.xaml.cs</span>.</p>
<p>Так, если мы откроем файл <span class="b">App.xaml.cs</span>, то увидим там следующий класс:</p>
<pre class="brush:c#;">
using System;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace HelloApp
{
    public partial class App : Application
    {
        public App()
        {
            InitializeComponent();

            MainPage = new MainPage();
        }

        protected override void OnStart()
        {
			
        }

        protected override void OnSleep()
        {
			
        }

        protected override void OnResume()
        {
			
        }
    }
}
</pre>
<p>Это обычный файл с кодом C#. Фактически единственно, что он делает, это устанавливает главную страницу приложения через свойство 
<code>MainPage</code> в конструкторе.</p>
<p>В качестве главной страницы устанавливается объект класса <span class="b">MainPage</span>, то есть единственная определенная в проекте страница.</p>
<p>Перейдем к определению этой страницы. Оно разбито на два файла. Файл <span class="b">MainPage.xaml</span> представляет визуальный интерфейс 
страницы в виде кода XAML (как и в WPF/UWP), который аналогичен HTML:</p>
<pre class="brush:xml;">
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="HelloApp.MainPage"&gt;

    &lt;StackLayout&gt;
        &lt;Frame BackgroundColor="#2196F3" Padding="24" CornerRadius="0"&gt;
            &lt;Label Text="Welcome to Xamarin.Forms!" HorizontalTextAlignment="Center" TextColor="White" FontSize="36"/&gt;
        &lt;/Frame&gt;
        &lt;Label Text="Start developing now" FontSize="Title" Padding="30,10,30,10"/&gt;
        &lt;Label Text="Make changes to your XAML file and save to see your UI update in the running app with XAML Hot Reload. Give it a try!" FontSize="16" Padding="30,0,30,0"/&gt;
        &lt;Label FontSize="16" Padding="30,24,30,0"&gt;
            &lt;Label.FormattedText&gt;
                &lt;FormattedString&gt;
                    &lt;FormattedString.Spans&gt;
                        &lt;Span Text="Learn more at "/&gt;
                        &lt;Span Text="https://aka.ms/xamarin-quickstart" FontAttributes="Bold"/&gt;
                    &lt;/FormattedString.Spans&gt;
                &lt;/FormattedString&gt;
            &lt;/Label.FormattedText&gt;
        &lt;/Label&gt;
    &lt;/StackLayout&gt;

&lt;/ContentPage&gt;
</pre>
<p>Так как для создания страниц используется класс <span class="b">ContentPage</span>, то в качестве корневого элемента в этом файле определен именно элемент ContentPage.</p>
<p>Все его содержимое состоит из элемента StackLayout, который позволяет расположить вложенные элементы в виде вертикального стека. 
Внутри StackLayout определен ряд элементов, которые собственно определяют видимые на экране элемента. В данном случае в основном это 
элементы Label, которые служат для вывода простого или отформатированного текста на экран. Текст задается с помощью 
атрибута <code>Text</code>.</p>
<p>Также в проекте есть и файл с кодом логики страницы - файл <span class="b">MainPage.xaml.cs</span>:</p>
<pre class="brush:c#;">
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace HelloApp
{
    public partial class MainPage : ContentPage
    {
        public MainPage()
        {
            InitializeComponent();
        }
    }
}
</pre>
<p>Однако по факту здесь никакой логики нет, кроме вызова в конструкторе <code>InitializeComponent()</code>. Через этот вызов на странице формируется интерфейс, 
который определен в файле MainPage.xaml.</p>
<p>Стоит отметить, что чтобы связать оба определения страницы, класс MainPage определяется здесь как частичный (partial), а в файле MainPage.xaml в определении 
страницы ContentPage указан класс, название которого совпадает с классом из MainPage.xaml.cs:</p>
<pre class="brush:xml;">x:Class="HelloApp.MainPage"</pre>
<p>К классу применяется атрибут <span class="b">DesignTimeVisible</span>, который позволяет в процессе разработки в Visual Studio в режиме превью увидеть созданный интерфейс.</p>
<p>Главный проект со всеми рассмотренными выше файлами компилируется в библиотеку dll, а остальные три проекта содержат ссылки на него. Так, если мы откроем узел References у каждого проекта, 
то увидим там ссылку на библиотеку <code>HelloApp</code> - то есть ссылку на главный проект.</p>
<p>Кроме этой библиотеки все три остальных проекта содержат еще ряд важных ссылок, в частности каждый проект содержит ссылку на свою специфическую библиотеку:</p>
<ul>
<li><p>Xamarin.Forms.Platform.Android</p></li>
<li><p>Xamarin.Forms.Platform.iOS</p></li>
<li><p>Universal Windows</p></li>
</ul>
<p>Данные библиотеки определяют для своей мобильной платформы статический метод <code>Xamarin.Forms.Init()</code>, который выполняет инициализацию 
системы Xamarin.Forms.</p>
<h3>Вызов приложения на Android</h3>
<p>Например, возьмем проект для <span class="b">Android</span>. В нем по умолчанию имеется файл <span class="b">MainActivity.cs</span>, с которого собственно начинается выполнение проекта на Android:</p>
<pre class="brush:c#;">
public class MainActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity
{
	protected override void OnCreate(Bundle savedInstanceState)
	{
		TabLayoutResource = Resource.Layout.Tabbar;
		ToolbarResource = Resource.Layout.Toolbar;

		base.OnCreate(savedInstanceState);

		Xamarin.Essentials.Platform.Init(this, savedInstanceState);
		global::Xamarin.Forms.Forms.Init(this, savedInstanceState);
		LoadApplication(new App());
	}
	// остальной код
}
</pre>
<p>Прежде всего обратим внимание на две обязательные строки:</p>
<pre class="brush:c#;">
Xamarin.Essentials.Platform.Init(this, savedInstanceState);
global::Xamarin.Forms.Forms.Init(this, savedInstanceState);
</pre>
<p>Здесь производится инициализация платформ Xamarin.Essentials и Xamarin.Forms.</p>
<p>Затем экземпляр класса App передается в метод <code>LoadApplication()</code>, который определен у класса Xamarin.Forms.Platform.Android.FormsAppCompatActivity, и собственно происходит запуск приложения Xamarin Forms.</p>
<pre class="brush:c#;">LoadApplication(new App());</pre>
<h3>Вызов приложения на iOS</h3>
<p>В проекте для iOS вызов приложеения xf будет происходить в классе <span class="b">AppDelegate</span> в его методе FinishedLaunching:</p>
<pre class="brush:c#;">
public partial class AppDelegate : global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate
{
	public override bool FinishedLaunching(UIApplication app, NSDictionary options)
	{
		global::Xamarin.Forms.Forms.Init();
		LoadApplication(new App());

		return base.FinishedLaunching(app, options);
	}
}
</pre>
<p>Вызов <code>global::Xamarin.Forms.Forms.Init()</code> инициализирует Xamarin Forms, а вызов <code>LoadApplication(new App())</code> запускает 
приложение XF на выполнение.</p>
<h3>UWP</h3>
<p>А в проекте для UWP все подобные действия разбиты на два этапа. Прежде всего, в в файле <span class="b">App.xaml.cs</span> в методе <code>OnLaunched()</code>: 
определена инициализация Xamarin Forms:</p>
<pre class="brush:c#;">
protected override void OnLaunched(LaunchActivatedEventArgs e)
{
	Frame rootFrame = Window.Current.Content as Frame;

	if (rootFrame == null)
	{
		rootFrame = new Frame();

		rootFrame.NavigationFailed += OnNavigationFailed;

		Xamarin.Forms.Forms.Init(e);	// инициализация Xamarin Forms
		
		// ... остальной код
	}
	// .... остальной код
}
</pre>
<p>А в файле <span class="b">MainPage.xaml.cs</span> поизводится запуск приложения:</p>
<pre class="brush:c#;">
public sealed partial class MainPage
{
	public MainPage()
	{
		this.InitializeComponent();

		LoadApplication(new HelloApp.App());	// вызов приложения Xamarin Forms
	}
}
</pre>
<p>Итак, фактически наш проект по умолчанию уже представляет простейшее приложение, которое просто выводит на экран некоторый текст. И теперь 
рассмотрим, как мы можем запускать приложение на разных ОС.</p>
	