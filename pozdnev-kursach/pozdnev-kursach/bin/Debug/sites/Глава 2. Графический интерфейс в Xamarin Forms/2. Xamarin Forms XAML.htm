	<p>Хотя мы можем создавать весь интерфейс и в коде C#, как было рассмотрено в прошлой теме, но более предпочтительным способом является его описание в XAML. XAML представляет язык разметки на 
основе xml для создания объектов декларативным образом. Собственно поэтому при создании проекта уже по умолчанию в него добавляются два файла <span class="b">MainPage.xaml</span> и <span class="b">MainPage.xaml.cs</span>.</p>
<img src="./pics/2.82.png" alt="Xaml в Xamarin в Visual Studio 2019" />
<p>Использование XAML несет некоторые преимущества.</p>
<p>Во-первых, с помощью XAML мы можем отделить графический интерфейс от логики приложения, благодаря чему над разными частями приложения могут 
относительно автономно работать разные специалисты: над интерфейсом - дизайнеры, над кодом логики - программисты.</p>
<p>Во-вторых, XAML позволяет описать интерфейс более ясным и понятным способом, такой код гораздо проще поддерживать и обновлять.</p>
<p>В целом XAML позволяет организовать весь пользовательский интерфейс в виде набора страниц подобно тому, как это делается в HTML.</p>
<p>Файл MainPage.xaml содержит разметку визуального интерфейса страницы:</p>
<pre class="brush:xml;">
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="HelloApp.MainPage"&gt;

    &lt;StackLayout&gt;
        &lt;Frame BackgroundColor="#2196F3" Padding="24" CornerRadius="0"&gt;
            &lt;Label Text="Welcome to Xamarin.Forms!" HorizontalTextAlignment="Center" TextColor="White" FontSize="36"/&gt;
        &lt;/Frame&gt;
        &lt;Label Text="Start developing now" FontSize="Title" Padding="30,10,30,10"/&gt;
        &lt;Label Text="Make changes to your XAML file and save to see your UI update in the running app with XAML Hot Reload. Give it a try!" FontSize="16" Padding="30,0,30,0"/&gt;
        &lt;Label FontSize="16" Padding="30,24,30,0"&gt;
            &lt;Label.FormattedText&gt;
                &lt;FormattedString&gt;
                    &lt;FormattedString.Spans&gt;
                        &lt;Span Text="Learn more at "/&gt;
                        &lt;Span Text="https://aka.ms/xamarin-quickstart" FontAttributes="Bold"/&gt;
                    &lt;/FormattedString.Spans&gt;
                &lt;/FormattedString&gt;
            &lt;/Label.FormattedText&gt;
        &lt;/Label&gt;
    &lt;/StackLayout&gt;

&lt;/ContentPage&gt;
</pre>
<h3>Структура файла XAML</h3>
<p>Файл с разметкой на xaml представляет собой обычный файл xml, и первой строкой идет стандартное определение xml-файла. 
Далее здесь определен элемент <code>ContentPage</code>, который представляет страницу и внутри которого определена метка с текстом.</p>
<p>В определении корневого элемента ContentPage подключаются два пространства имен с помощью атрибутов <span class="b">xmlns</span>.</p>
<p>Пространство имен <span class="b">http://xamarin.com/schemas/2014/forms</span> определяет большинство типов из Xamarin Forms, которые применяются 
для построения графического интерфейса.</p>
<p>Второе пространство имен <span class="b">http://schemas.microsoft.com/winfx/2009/xaml</span> определяет ряд типов XAML и типы CLR. Так как только одно 
пространство имен может быть базовым, то это пространство используется с префиксом (или проекцируется на префикс) x: <code>xmlns:x</code>. Это значит, что те свойства элементов, которые заключены в этом пространстве имен, 
будут использоваться с префиксом x - <code>x:Name</code> или <code>x:Class</code></p>

<p>После подключения пространств имен идет атрибут <code>x:Class="HelloApp.MainPage</code>, который указывает на класс, представляющий данную страницу.</p>
<p>Далее внутри ContentPage определены непосредственно элементы, которые и будут представлять графический интерфейс.</p>
<p>В данном случае в ContentPage определен контейнер компоновки StackLayout, который по умолчанию располагает вложенные элементы в столбик. А в элементе StackLayout 
расположен элементы Frame и Label.</p>
<h3>Элементы в XAML и их атрибуты</h3>
<p>XAML предлагает очень простую и ясную схему определения различных элементов и их свойств. Каждый элемент, как и любой элемент XML, должен иметь открытый и закрытый тег, как в случае с элементом ContentPage:</p>
<pre class="brush:xml;">
&lt;Label&gt;&lt;/Label&gt;
</pre>
<p>Либо элемент может иметь сокращенню форму с закрывающим слешем в конце, наподобие:</p>
<pre class="brush:xml;">
&lt;Label /&gt;
</pre>
<p>Каждый элемент в XAML представляет объект определенного класса C#, а атрибуты элементов соотносятся со свойствами этих классом. Например, элемент ContentPage фактически будет представлять объект одноименного класса 
ContentPage, а элемент Label - объект класса Label.</p>
<p>Каждый элемент в xaml можно сопоставить определенному классу в C#, а каждый атрибут элемента - свойству этого класса. Однако если свойства классов могут 
принимать значения различных типов: string, double, int и т.д. То в XAML атрибуты элементов имеют текстовые значения. Например, возьмем один из определенных на 
странице элементов Label:</p>
<pre class="brush:xml;">&lt;Label Text="Welcome to Xamarin.Forms!" HorizontalTextAlignment="Center" TextColor="White" FontSize="36" /&gt;</pre>
<p>Свойство <code>Text</code> класса Label в качестве значение принимает строку, поэтому здесь никаких преобразований не потребуется. Но, к примеру, свойство 
<code>HorizontalTextAlignment</code>, которое устанавливает выравнивание текста по горизонтали, в качестве значения принимает одну из констант перечисления <span class="b">TextAlignment</span>, например, 
<code>TextAlignment.Center</code>. Однако в коде XAML мы присваиваем просто значение <code>Center</code>. Дело в том, что в Xamarin Forms действуют конвертеры типов, которые позволяют преобразовать 
от одного типа к другому.</p>
<h3>Сложные свойства</h3>
<p>Кроме простых свойств, которые могут устанавливаться в с помощью простой строки, например, <code>&lt;Label Text="Welcome to Xamarin.Forms!" /&gt;</code>, в XAML могут применяться 
сложные или комплексные свойства. В таких случаях свойство класса может принимать в качестве значения какой-нибудь сложный объект, который в свою очередь 
имеет некоторый набор свойств. Сложные свойства определяются в формате:</p>
<pre class="brush:xml;">
&lt;Элемент.Свойство&gt;
	&lt;Сложный_объект /&gt;
&lt;/Элемент.Свойство&gt;
</pre>
<p>Например, возьмем другой, определенный на странице элемент Label:</p>
<pre class="brush:xml;">
&lt;Label FontSize="16" Padding="30,24,30,0"&gt;
	&lt;Label.FormattedText&gt;
		&lt;FormattedString&gt;
			&lt;FormattedString.Spans&gt;
				&lt;Span Text="Learn more at "/&gt;
				&lt;Span Text="https://aka.ms/xamarin-quickstart" FontAttributes="Bold"/&gt;
			&lt;/FormattedString.Spans&gt;
		&lt;/FormattedString&gt;
	&lt;/Label.FormattedText&gt;
&lt;/Label&gt;
</pre>
<p>Свойство <span class="b">FormattedText</span> представляет форматированный текст (текст со сложным оформлением) и является сложным свойством. 
В качестве значения оно принимает объект <span class="b">FormattedString</span>, который передается в качестве вложенного объекта:</p>
<pre class="brush:xml;">
&lt;FormattedString&gt;
	&lt;FormattedString.Spans&gt;
		&lt;Span Text="Learn more at "/&gt;
		&lt;Span Text="https://aka.ms/xamarin-quickstart" FontAttributes="Bold"/&gt;
	&lt;/FormattedString.Spans&gt;
&lt;/FormattedString&gt;
</pre>
<p>У объекта <span class="b">FormattedString</span>, в свою очередь, имеет свойство <span class="b">Spans</span>, которое также является 
сложным свойством и которое представляет набор элементов <span class="b">Span</span> - отдельных кусочков текста. А у каждого элемента Span устанавливается атрибут <code>Text</code>, который задает выводимый текст.</p>

	
	<div style="margin-top:25px;">
