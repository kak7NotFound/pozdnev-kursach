	<p>При добавлении новой страницы XAML в проект также одновременно добавляется файл кода C#. Так, при создании проекта в него по умолчанию добавляется 
файл с графическим интерфейсов в XAML - <span class="b">MainPage.xaml</span> и файл <span class="b">MainPage.xaml.cs</span>, где, 
как предполагается, должна находится логика приложения, связанная с разметкой из файла XAML.</p>
<img src="./pics/2.82.png" alt="Xaml в Xamarin в Visual Studio 2019" />
<p>Файлы XAML позволяют нам определить интерфейс окна, но для создания логики приложения, например, для 
определения обработчиков событий элементов управления, нам все равно придется воспользоваться кодом C#.</p>
<p>По умолчанию в файле XAML определен атрибут <span class="b">x:Class</span>:</p>
<pre class="brush:xml;">x:Class="HelloApp.MainPage"</pre>
<p>Атрибут <code>x:Class="HelloApp.MainPage</code> указывает на класс, который будет представлять данную страницу и в который будет компилироваться код в XAML 
при компиляции. То есть во время компиляции будет генерироваться класс <code>HelloApp.MainPage</code>, унаследованный от класса ContentPage.</p>
<p>Кроме того в файле отделенного кода <span class="b">MainPage.xaml.cs</span>, мы также можем найти класс с тем же именем, который по умолчанию он имеет 
некоторый код:</p>
<pre class="brush:c#;">
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace HelloApp
{
    public partial class MainPage : ContentPage
    {
        public MainPage()
        {
            InitializeComponent();
        }
    }
}
</pre>
<p>Этот практически пустой класс уже выполняет некоторую работу. Во время компиляции этот класс объединяется с классом, сгенерированным из 
кода XAML. Чтобы такое слияние классов во время компиляции произошло, класс MainPage определяется как частичный с модификатором partial. 
А через метод InitializeComponent() класс MainPage вызывает скомпилированный ранее код XAML, разбирает его и по нему строит графический 
интерфейс страницы.</p>
<h3>Взаимодействие с кодом c#</h3>
<p>Определим на станице <span class="b">MainPage.xaml</span> какое-либо примитивное содержание, например, кнопку:</p>
<pre class="brush:xml;">
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="HelloApp.MainPage"&gt;

    &lt;Button x:Name="button1" Text="Нажать!" Clicked="Button_Click" /&gt;

&lt;/ContentPage&gt;
</pre>
<p>В данном случае определяется кнопка, которая занимает все пространство страницы MainPage. 
Свойства элементов определяются в виде атрибутов, например, <code>Text="Нажать!"</code>. События также определяются как атрибуты. 
Например, с помощью атрибута <span class="b">Clicked</span> устанавливается обработчик для события нажатия: 
<code>Clicked="Button_Click"</code>. И чтобы определить обработчик, перейдем в файл <span class="b">MainPage.xaml.cs</span> и определим в классе MainPage 
следующий метод:</p>
<pre class="brush:c#;">
public partial class MainPage : ContentPage
{
    public MainPage()
    {
        InitializeComponent();
    }

    private void Button_Click(object sender, EventArgs e)
    {
        button1.Text = "Нажато!!!";
	}
}
</pre>
<p>С помощью атрибута <span class="b">x:Name</span> элементу назначается имя. При компиляции приложения будет создаваться приватная переменная 
с этим именем. Через это имя в файле отделенного кода C# мы сможем ссылать на этот элемент, точнее на объект, который представляет в файле кода данный элемент. 
В частности, здесь кнопке назначено имя "button1". Соответственно в файле кода мы можем обратиться к свойствам и методам кнопки через это имя. 
В итоге по нажатию на кнопку у нее изменится текст.</p>
<img src="./pics/2.92.png" alt="Взаимодействие кода C# и XAML в Xamarin Forms" />
